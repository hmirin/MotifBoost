import pathlib
from typing import Callable, Optional
from uuid import uuid4

import click
import pandas as pd

from src.dataset.settings import emerson_classification_cohort_split
from src.repertoire import Repertoire, repertoire_dataset_loader
from src.util import get_current_datetime

deeprc_available_sample_ids = [
    "HIP00110",
    "HIP00169",
    "HIP00594",
    "HIP00602",
    "HIP00614",
    "HIP00640",
    "HIP00707",
    "HIP00710",
    "HIP00715",
    "HIP00728",
    "HIP00734",
    "HIP00761",
    "HIP00769",
    "HIP00771",
    "HIP00773",
    "HIP00775",
    "HIP00777",
    "HIP00779",
    "HIP00805",
    "HIP00813",
    "HIP00819",
    "HIP00822",
    "HIP00825",
    "HIP00826",
    "HIP00832",
    "HIP00838",
    "HIP00851",
    "HIP00869",
    "HIP00898",
    "HIP00904",
    "HIP00924",
    "HIP00926",
    "HIP00934",
    "HIP00951",
    "HIP00971",
    "HIP00985",
    "HIP00997",
    "HIP00999",
    "HIP01004",
    "HIP01022",
    "HIP01055",
    "HIP01091",
    "HIP01129",
    "HIP01140",
    "HIP01160",
    "HIP01161",
    "HIP01162",
    "HIP01180",
    "HIP01181",
    "HIP01197",
    "HIP01206",
    "HIP01218",
    "HIP01219",
    "HIP01220",
    "HIP01223",
    "HIP01232",
    "HIP01253",
    "HIP01255",
    "HIP01264",
    "HIP01266",
    "HIP01298",
    "HIP01313",
    "HIP01359",
    "HIP01384",
    "HIP01391",
    "HIP01392",
    "HIP01393",
    "HIP01465",
    "HIP01470",
    "HIP01499",
    "HIP01501",
    "HIP01571",
    "HIP01582",
    "HIP01596",
    "HIP01597",
    "HIP01765",
    "HIP01795",
    "HIP01797",
    "HIP01798",
    "HIP01805",
    "HIP01820",
    "HIP01850",
    "HIP01856",
    "HIP01865",
    "HIP01867",
    "HIP01870",
    "HIP01947",
    "HIP02024",
    "HIP02078",
    "HIP02090",
    "HIP02103",
    "HIP02112",
    "HIP02126",
    "HIP02271",
    "HIP02663",
    "HIP02734",
    "HIP02737",
    "HIP02742",
    "HIP02780",
    "HIP02790",
    "HIP02805",
    "HIP02811",
    "HIP02820",
    "HIP02848",
    "HIP02855",
    "HIP02873",
    "HIP02875",
    "HIP02877",
    "HIP02928",
    "HIP02931",
    "HIP02947",
    "HIP02962",
    "HIP02997",
    "HIP03004",
    "HIP03099",
    "HIP03107",
    "HIP03111",
    "HIP03125",
    "HIP03184",
    "HIP03194",
    "HIP03197",
    "HIP03216",
    "HIP03228",
    "HIP03233",
    "HIP03236",
    "HIP03275",
    "HIP03370",
    "HIP03378",
    "HIP03381",
    "HIP03383",
    "HIP03385",
    "HIP03484",
    "HIP03494",
    "HIP03495",
    "HIP03502",
    "HIP03505",
    "HIP03511",
    "HIP03591",
    "HIP03592",
    "HIP03597",
    "HIP03618",
    "HIP03628",
    "HIP03630",
    "HIP03651",
    "HIP03677",
    "HIP03678",
    "HIP03685",
    "HIP03693",
    "HIP03695",
    "HIP03720",
    "HIP03732",
    "HIP03746",
    "HIP03807",
    "HIP03812",
    "HIP03814",
    "HIP04455",
    "HIP04464",
    "HIP04471",
    "HIP04475",
    "HIP04480",
    "HIP04498",
    "HIP04509",
    "HIP04510",
    "HIP04511",
    "HIP04527",
    "HIP04532",
    "HIP04545",
    "HIP04552",
    "HIP04555",
    "HIP04576",
    "HIP04578",
    "HIP04597",
    "HIP04605",
    "HIP04611",
    "HIP04634",
    "HIP04958",
    "HIP05311",
    "HIP05331",
    "HIP05377",
    "HIP05388",
    "HIP05390",
    "HIP05398",
    "HIP05405",
    "HIP05409",
    "HIP05434",
    "HIP05437",
    "HIP05444",
    "HIP05455",
    "HIP05460",
    "HIP05467",
    "HIP05524",
    "HIP05533",
    "HIP05535",
    "HIP05540",
    "HIP05551",
    "HIP05552",
    "HIP05559",
    "HIP05561",
    "HIP05563",
    "HIP05574",
    "HIP05578",
    "HIP05590",
    "HIP05595",
    "HIP05665",
    "HIP05757",
    "HIP05763",
    "HIP05815",
    "HIP05817",
    "HIP05832",
    "HIP05838",
    "HIP05841",
    "HIP05934",
    "HIP05941",
    "HIP05942",
    "HIP05948",
    "HIP05960",
    "HIP06191",
    "HIP07754",
    "HIP08076",
    "HIP08223",
    "HIP08230",
    "HIP08236",
    "HIP08305",
    "HIP08337",
    "HIP08339",
    "HIP08345",
    "HIP08346",
    "HIP08389",
    "HIP08399",
    "HIP08400",
    "HIP08439",
    "HIP08499",
    "HIP08507",
    "HIP08521",
    "HIP08596",
    "HIP08598",
    "HIP08653",
    "HIP08702",
    "HIP08710",
    "HIP08711",
    "HIP08725",
    "HIP08792",
    "HIP08805",
    "HIP08816",
    "HIP08821",
    "HIP08827",
    "HIP08888",
    "HIP08890",
    "HIP08972",
    "HIP08977",
    "HIP08986",
    "HIP08989",
    "HIP09001",
    "HIP09020",
    "HIP09022",
    "HIP09026",
    "HIP09029",
    "HIP09041",
    "HIP09046",
    "HIP09051",
    "HIP09062",
    "HIP09097",
    "HIP09118",
    "HIP09119",
    "HIP09122",
    "HIP09150",
    "HIP09159",
    "HIP09190",
    "HIP09235",
    "HIP09253",
    "HIP09284",
    "HIP09344",
    "HIP09364",
    "HIP09365",
    "HIP09366",
    "HIP09430",
    "HIP09559",
    "HIP09624",
    "HIP09681",
    "HIP09775",
    "HIP09789",
    "HIP10358",
    "HIP10376",
    "HIP10377",
    "HIP10389",
    "HIP10408",
    "HIP10424",
    "HIP10443",
    "HIP10445",
    "HIP10447",
    "HIP10480",
    "HIP10507",
    "HIP10514",
    "HIP10545",
    "HIP10564",
    "HIP10568",
    "HIP10597",
    "HIP10602",
    "HIP10639",
    "HIP10669",
    "HIP10694",
    "HIP10716",
    "HIP10726",
    "HIP10730",
    "HIP10746",
    "HIP10759",
    "HIP10787",
    "HIP10814",
    "HIP10815",
    "HIP10817",
    "HIP10820",
    "HIP10821",
    "HIP10823",
    "HIP10846",
    "HIP11058",
    "HIP11513",
    "HIP11518",
    "HIP11553",
    "HIP11613",
    "HIP11649",
    "HIP11711",
    "HIP11717",
    "HIP11758",
    "HIP11774",
    "HIP11784",
    "HIP11845",
    "HIP11857",
    "HIP11937",
    "HIP11989",
    "HIP12034",
    "HIP12088",
    "HIP12091",
    "HIP12097",
    "HIP12099",
    "HIP12123",
    "HIP12129",
    "HIP12143",
    "HIP12165",
    "HIP12527",
    "HIP12533",
    "HIP12534",
    "HIP12538",
    "HIP12703",
    "HIP12743",
    "HIP12900",
    "HIP12980",
    "HIP13015",
    "HIP13122",
    "HIP13142",
    "HIP13157",
    "HIP13168",
    "HIP13176",
    "HIP13178",
    "HIP13183",
    "HIP13185",
    "HIP13193",
    "HIP13198",
    "HIP13206",
    "HIP13209",
    "HIP13214",
    "HIP13217",
    "HIP13220",
    "HIP13227",
    "HIP13228",
    "HIP13230",
    "HIP13233",
    "HIP13244",
    "HIP13245",
    "HIP13251",
    "HIP13252",
    "HIP13256",
    "HIP13263",
    "HIP13265",
    "HIP13274",
    "HIP13276",
    "HIP13284",
    "HIP13291",
    "HIP13294",
    "HIP13296",
    "HIP13303",
    "HIP13306",
    "HIP13309",
    "HIP13311",
    "HIP13318",
    "HIP13319",
    "HIP13324",
    "HIP13325",
    "HIP13350",
    "HIP13352",
    "HIP13355",
    "HIP13360",
    "HIP13361",
    "HIP13363",
    "HIP13370",
    "HIP13376",
    "HIP13383",
    "HIP13396",
    "HIP13402",
    "HIP13414",
    "HIP13427",
    "HIP13449",
    "HIP13463",
    "HIP13465",
    "HIP13473",
    "HIP13478",
    "HIP13489",
    "HIP13497",
    "HIP13505",
    "HIP13511",
    "HIP13513",
    "HIP13515",
    "HIP13518",
    "HIP13554",
    "HIP13567",
    "HIP13592",
    "HIP13610",
    "HIP13625",
    "HIP13627",
    "HIP13636",
    "HIP13654",
    "HIP13658",
    "HIP13661",
    "HIP13663",
    "HIP13667",
    "HIP13671",
    "HIP13686",
    "HIP13695",
    "HIP13699",
    "HIP13703",
    "HIP13709",
    "HIP13710",
    "HIP13720",
    "HIP13722",
    "HIP13736",
    "HIP13741",
    "HIP13746",
    "HIP13749",
    "HIP13751",
    "HIP13753",
    "HIP13754",
    "HIP13757",
    "HIP13760",
    "HIP13764",
    "HIP13766",
    "HIP13769",
    "HIP13771",
    "HIP13773",
    "HIP13774",
    "HIP13777",
    "HIP13780",
    "HIP13782",
    "HIP13786",
    "HIP13789",
    "HIP13793",
    "HIP13794",
    "HIP13796",
    "HIP13800",
    "HIP13803",
    "HIP13806",
    "HIP13809",
    "HIP13810",
    "HIP13812",
    "HIP13814",
    "HIP13818",
    "HIP13822",
    "HIP13823",
    "HIP13831",
    "HIP13833",
    "HIP13847",
    "HIP13848",
    "HIP13852",
    "HIP13853",
    "HIP13854",
    "HIP13856",
    "HIP13857",
    "HIP13859",
    "HIP13860",
    "HIP13865",
    "HIP13869",
    "HIP13871",
    "HIP13875",
    "HIP13877",
    "HIP13880",
    "HIP13887",
    "HIP13893",
    "HIP13894",
    "HIP13900",
    "HIP13902",
    "HIP13903",
    "HIP13911",
    "HIP13916",
    "HIP13919",
    "HIP13920",
    "HIP13923",
    "HIP13926",
    "HIP13928",
    "HIP13929",
    "HIP13932",
    "HIP13933",
    "HIP13935",
    "HIP13938",
    "HIP13939",
    "HIP13941",
    "HIP13944",
    "HIP13945",
    "HIP13947",
    "HIP13949",
    "HIP13951",
    "HIP13954",
    "HIP13956",
    "HIP13958",
    "HIP13961",
    "HIP13962",
    "HIP13964",
    "HIP13966",
    "HIP13967",
    "HIP13972",
    "HIP13975",
    "HIP13976",
    "HIP13978",
    "HIP13981",
    "HIP13983",
    "HIP13986",
    "HIP13987",
    "HIP13988",
    "HIP13989",
    "HIP13992",
    "HIP13994",
    "HIP13996",
    "HIP14000",
    "HIP14004",
    "HIP14007",
    "HIP14009",
    "HIP14014",
    "HIP14015",
    "HIP14016",
    "HIP14018",
    "HIP14020",
    "HIP14022",
    "HIP14024",
    "HIP14028",
    "HIP14030",
    "HIP14034",
    "HIP14036",
    "HIP14037",
    "HIP14039",
    "HIP14041",
    "HIP14043",
    "HIP14045",
    "HIP14048",
    "HIP14051",
    "HIP14053",
    "HIP14055",
    "HIP14059",
    "HIP14060",
    "HIP14064",
    "HIP14066",
    "HIP14071",
    "HIP14072",
    "HIP14074",
    "HIP14077",
    "HIP14079",
    "HIP14080",
    "HIP14089",
    "HIP14090",
    "HIP14092",
    "HIP14095",
    "HIP14096",
    "HIP14103",
    "HIP14106",
    "HIP14107",
    "HIP14109",
    "HIP14110",
    "HIP14114",
    "HIP14118",
    "HIP14121",
    "HIP14124",
    "HIP14127",
    "HIP14129",
    "HIP14130",
    "HIP14134",
    "HIP14136",
    "HIP14138",
    "HIP14140",
    "HIP14142",
    "HIP14143",
    "HIP14148",
    "HIP14152",
    "HIP14153",
    "HIP14156",
    "HIP14157",
    "HIP14160",
    "HIP14161",
    "HIP14170",
    "HIP14172",
    "HIP14174",
    "HIP14175",
    "HIP14176",
    "HIP14178",
    "HIP14181",
    "HIP14183",
    "HIP14184",
    "HIP14187",
    "HIP14192",
    "HIP14194",
    "HIP14196",
    "HIP14202",
    "HIP14205",
    "HIP14206",
    "HIP14209",
    "HIP14211",
    "HIP14213",
    "HIP14214",
    "HIP14217",
    "HIP14218",
    "HIP14221",
    "HIP14223",
    "HIP14226",
    "HIP14227",
    "HIP14230",
    "HIP14231",
    "HIP14234",
    "HIP14236",
    "HIP14237",
    "HIP14238",
    "HIP14240",
    "HIP14241",
    "HIP14243",
    "HIP14244",
    "HIP14361",
    "HIP14363",
    "HIP14494",
    "HIP14844",
    "HIP14911",
    "HIP15685",
    "HIP15854",
    "HIP15855",
    "HIP15860",
    "HIP15861",
    "HIP16515",
    "HIP16738",
    "HIP16867",
    "HIP17370",
    "HIP17440",
    "HIP17445",
    "HIP17449",
    "HIP17454",
    "HIP17457",
    "HIP17462",
    "HIP17534",
    "HIP17577",
    "HIP17585",
    "HIP17657",
    "HIP17698",
    "HIP17723",
    "HIP17737",
    "HIP17760",
    "HIP17793",
    "HIP17837",
    "HIP17845",
    "HIP17887",
    "HIP19048",
    "HIP19089",
    "HIP19716",
    "HIP19717",
    "Keck0001_MC1",
    "Keck0002_MC1",
    "Keck0003_MC1",
    "Keck0004_MC1",
    "Keck0005_MC1",
    "Keck0006_MC1",
    "Keck0007_MC1",
    "Keck0008_MC1",
    "Keck0009_MC1",
    "Keck0010_MC1",
    "Keck0011_MC1",
    "Keck0012_MC1",
    "Keck0013_MC1",
    "Keck0014_MC1",
    "Keck0015_MC1",
    "Keck0016_MC1",
    "Keck0017_MC1",
    "Keck0018_MC1",
    "Keck0019_MC1",
    "Keck0020_MC1",
    "Keck0021_MC1",
    "Keck0022_MC1",
    "Keck0023_MC1",
    "Keck0024_MC1",
    "Keck0025_MC1",
    "Keck0026_MC1",
    "Keck0027_MC1",
    "Keck0028_MC1",
    "Keck0029_MC1",
    "Keck0030_MC1",
    "Keck0031_MC1",
    "Keck0032_MC1",
    "Keck0033_MC1",
    "Keck0034_MC1",
    "Keck0035_MC1",
    "Keck0036_MC1",
    "Keck0037_MC1",
    "Keck0038_MC1",
    "Keck0039_MC1",
    "Keck0040_MC1",
    "Keck0041_MC1",
    "Keck0042_MC1",
    "Keck0043_MC1",
    "Keck0044_MC1",
    "Keck0045_MC1",
    "Keck0046_MC1",
    "Keck0047_MC1",
    "Keck0048_MC1",
    "Keck0049_MC1",
    "Keck0050_MC1",
    "Keck0051_MC1",
    "Keck0052_MC1",
    "Keck0053_MC1",
    "Keck0054_MC1",
    "Keck0055_MC1",
    "Keck0056_MC1",
    "Keck0057_MC1",
    "Keck0058_MC1",
    "Keck0059_MC1",
    "Keck0060_MC1",
    "Keck0061_MC1",
    "Keck0062_MC1",
    "Keck0063_MC1",
    "Keck0064_MC1",
    "Keck0065_MC1",
    "Keck0066_MC1",
    "Keck0067_MC1",
    "Keck0068_MC1",
    "Keck0069_MC1",
    "Keck0070_MC1",
    "Keck0071_MC1",
    "Keck0072_MC1",
    "Keck0073_MC1",
    "Keck0074_MC1",
    "Keck0075_MC1",
    "Keck0076_MC1",
    "Keck0077_MC1",
    "Keck0078_MC1",
    "Keck0079_MC1",
    "Keck0080_MC1",
    "Keck0081_MC1",
    "Keck0082_MC1",
    "Keck0083_MC1",
    "Keck0084_MC1",
    "Keck0085_MC1",
    "Keck0086_MC1",
    "Keck0087_MC1",
    "Keck0088_MC1",
    "Keck0089_MC1",
    "Keck0090_MC1",
    "Keck0091_MC1",
    "Keck0092_MC1",
    "Keck0093_MC1",
    "Keck0094_MC1",
    "Keck0095_MC1",
    "Keck0096_MC1",
    "Keck0097_MC1",
    "Keck0098_MC1",
    "Keck0099_MC1",
    "Keck0100_MC1",
    "Keck0101_MC1",
    "Keck0102_MC1",
    "Keck0103_MC1",
    "Keck0104_MC1",
    "Keck0105_MC1",
    "Keck0106_MC1",
    "Keck0107_MC1",
    "Keck0108_MC1",
    "Keck0109_MC1",
    "Keck0110_MC1",
    "Keck0111_MC1",
    "Keck0112_MC1",
    "Keck0113_MC1",
    "Keck0114_MC1",
    "Keck0115_MC1",
    "Keck0116_MC1",
    "Keck0117_MC1",
    "Keck0118_MC1",
    "Keck0119_MC1",
    "Keck0120_MC1",
]


def subsampler(
    save_dir: str,
    to_dir: str,
    experiment_id: str,
    train_size: int,
    test_size: int,
    random_seed: int,
    get_class: Callable[[Repertoire], bool],
    test_str: str = None,  # if given, will ignore test_size, sometimes we need to fix test
    filter_by_sample_id: Optional[Callable[[str], bool]] = None,
    filter_by_repertoire: Optional[Callable[[Repertoire], bool]] = None,
    skip_after: Optional[int] = None,
    n_processes: Optional[int] = None,
):

    repertoires = repertoire_dataset_loader(
        save_dir,
        experiment_id,
        filter_by_sample_id,
        filter_by_repertoire,
        skip_after,
        n_processes,
    )

    to_dir_path = pathlib.Path(to_dir)
    to_dir_path.mkdir(parents=True, exist_ok=True)
    repertoires_filtered = []
    for r in repertoires:
        sample_id = r.sample_id
        if sample_id.startswith("Keck"):
            sample_id = r.sample_id + "_MC1"
        if sample_id in deeprc_available_sample_ids:
            repertoires_filtered.append(r)
        else:
            print(r.sample_id, "is skipped")

    df = pd.DataFrame.from_dict(
        {
            "sample_name": [r.sample_id for r in repertoires_filtered],
            "status": [get_class(r) for r in repertoires_filtered],
        }
    )

    # train test split
    if test_str:
        train_df = df[~df["sample_name"].str.contains(test_str)]
        train_positive_rate = len(train_df[train_df["status"]]) / len(train_df)
        test_df = df[df["sample_name"].str.contains(test_str)]
        train_positive_size = int(train_positive_rate * train_size)
        train_negative_size = train_size - train_positive_size
        train_positive_df = train_df[train_df["status"]]
        train_negative_df = train_df[train_df["status"] == False]
        train_positive_subsampled_df = train_positive_df.sample(
            train_positive_size, replace=False, random_state=random_seed
        )
        train_negative_subsampled_df = train_negative_df.sample(
            train_negative_size, replace=False, random_state=random_seed
        )
        train_df = pd.concat(
            [train_positive_subsampled_df, train_negative_subsampled_df]
        )
        train_df["type"] = "train"
        test_df["type"] = "test"
    else:
        positive_df = df[df["status"]]
        negative_df = df[df["status"] == False]
        positive_size = len(positive_df)
        negative_size = len(negative_df)
        all_size = positive_size + negative_size
        positive_rate = positive_size / all_size
        train_positive_size = int(positive_rate * train_size)
        train_negative_size = train_size - train_positive_size
        train_positive_subsampled_df = positive_df.sample(
            train_positive_size, replace=False, random_state=random_seed
        )
        train_negative_subsampled_df = negative_df.sample(
            train_negative_size, replace=False, random_state=random_seed
        )
        train_df = pd.concat(
            [train_positive_subsampled_df, train_negative_subsampled_df]
        )

        assert sum(train_df["status"]) == int(positive_rate * train_size)
        assert sum(train_df["status"] == False) == train_size - int(
            positive_rate * train_size
        )
        assert len(train_df) == train_size
        assert set(train_df.sample_name) == train_size

        test_df = df[[s not in train_df["sample_name"]
                      for s in df["sample_name"]]]
        test_positive_df = test_df[test_df["status"]]
        test_negative_df = test_df[test_df["status"] == False]
        test_positive_size = int(positive_rate * test_size)
        test_negative_size = test_size - test_positive_size
        test_positive_subsampled_df = test_positive_df.sample(
            test_positive_size, replace=False, random_state=random_seed
        )
        test_negative_subsampled_df = test_negative_df.sample(
            test_negative_size, replace=False, random_state=random_seed
        )
        test_df = pd.concat([test_positive_subsampled_df,
                            test_negative_subsampled_df])

        assert sum(test_df["status"]) == int(positive_rate * test_size)
        assert sum(test_df["status"] == False) == test_size - int(
            positive_rate * test_size
        )
        assert len(test_df) == test_size
        assert set(test_df.sample_name) == test_size

        assert len(set(train_df.sample_name) & set(train_df.sample_name)) == 0

        train_df["type"] = "train"
        test_df["type"] = "test"

    df = pd.concat([train_df, test_df])
    metadata_path = to_dir_path / (
        get_current_datetime()
        + "_"
        + str(uuid4()).replace("-", "")
        + "_subsampled_"
        + "train"
        + str(train_size)
        + "test"
        + str(test_str)
        + str(test_size)
        + "_from_"
        + experiment_id
        + ".tsv"
    )
    df.to_csv(metadata_path)


@click.command()
@click.option(
    "--save_dir", default="./data/interim/repertoires", help="Path to save dir"
)
@click.option("--to_dir",
              default="./data/interim/sampled_repertoires",
              help="Path to save dir")
@click.option("--experiment_id", default="Emerson",
              type=str, help="experiment_id to convert")
@click.option("--times", default=50, type=int, help="experiment_id to convert")
@click.option("--train_size", default=50, type=int,
              help="experiment_id to convert")
@click.option("--test_size", default=100, type=int,
              help="experiment_id to convert")
@click.option("--test_str", default=None, type=str,
              help="experiment_id to convert")
def main(
    save_dir: str,
    to_dir: str,
    train_size,
    test_size,
    test_str,
    times: int,
    experiment_id: str,
):
    get_class = emerson_classification_cohort_split.get_class
    filter_by_sample_id = emerson_classification_cohort_split.filter_by_sample_id
    filter_by_repertoire = emerson_classification_cohort_split.filter_by_repertoire

    for i in range(times):
        subsampler(
            save_dir=save_dir,
            to_dir=to_dir,
            experiment_id=experiment_id,
            train_size=train_size,
            test_size=test_size,
            random_seed=i,
            get_class=get_class,
            test_str=test_str,
            filter_by_sample_id=filter_by_sample_id,
            filter_by_repertoire=filter_by_repertoire,
            skip_after=None,
            n_processes=None,
        )


if __name__ == "__main__":
    main()

# python -m scripts.emerson_subsampler  --to_dir
# ./data/interim/sampled_repertoires/Emerson/XX/ --times 50 --train_size
# XX --test_str Keck
